// Code generated by mockery. DO NOT EDIT.

package domain

import (
	context "context"
	domain "todo_list/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: ctx, token
func (_m *MockUserService) Authenticate(ctx context.Context, token string) (domain.User, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type MockUserService_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockUserService_Expecter) Authenticate(ctx interface{}, token interface{}) *MockUserService_Authenticate_Call {
	return &MockUserService_Authenticate_Call{Call: _e.mock.On("Authenticate", ctx, token)}
}

func (_c *MockUserService_Authenticate_Call) Run(run func(ctx context.Context, token string)) *MockUserService_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_Authenticate_Call) Return(_a0 domain.User, _a1 error) *MockUserService_Authenticate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Authenticate_Call) RunAndReturn(run func(context.Context, string) (domain.User, error)) *MockUserService_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MockUserService) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockUserService_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockUserService_Expecter) Close() *MockUserService_Close_Call {
	return &MockUserService_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockUserService_Close_Call) Run(run func()) *MockUserService_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUserService_Close_Call) Return(_a0 error) *MockUserService_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_Close_Call) RunAndReturn(run func() error) *MockUserService_Close_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, name, email, passwordHash, token
func (_m *MockUserService) RegisterUser(ctx context.Context, name string, email string, passwordHash string, token string) error {
	ret := _m.Called(ctx, name, email, passwordHash, token)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, name, email, passwordHash, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type MockUserService_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - email string
//   - passwordHash string
//   - token string
func (_e *MockUserService_Expecter) RegisterUser(ctx interface{}, name interface{}, email interface{}, passwordHash interface{}, token interface{}) *MockUserService_RegisterUser_Call {
	return &MockUserService_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, name, email, passwordHash, token)}
}

func (_c *MockUserService_RegisterUser_Call) Run(run func(ctx context.Context, name string, email string, passwordHash string, token string)) *MockUserService_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MockUserService_RegisterUser_Call) Return(_a0 error) *MockUserService_RegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_RegisterUser_Call) RunAndReturn(run func(context.Context, string, string, string, string) error) *MockUserService_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
