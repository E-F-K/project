// Code generated by mockery. DO NOT EDIT.

package domain

import (
	context "context"
	domain "todo_list/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockTaskInterface is an autogenerated mock type for the TaskInterface type
type MockTaskInterface struct {
	mock.Mock
}

type MockTaskInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTaskInterface) EXPECT() *MockTaskInterface_Expecter {
	return &MockTaskInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockTaskInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockTaskInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockTaskInterface_Expecter) Close() *MockTaskInterface_Close_Call {
	return &MockTaskInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockTaskInterface_Close_Call) Run(run func()) *MockTaskInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTaskInterface_Close_Call) Return(_a0 error) *MockTaskInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskInterface_Close_Call) RunAndReturn(run func() error) *MockTaskInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockTaskInterface) Create(_a0 context.Context, _a1 domain.Task) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTaskInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.Task
func (_e *MockTaskInterface_Expecter) Create(_a0 interface{}, _a1 interface{}) *MockTaskInterface_Create_Call {
	return &MockTaskInterface_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *MockTaskInterface_Create_Call) Run(run func(_a0 context.Context, _a1 domain.Task)) *MockTaskInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Task))
	})
	return _c
}

func (_c *MockTaskInterface_Create_Call) Return(_a0 error) *MockTaskInterface_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskInterface_Create_Call) RunAndReturn(run func(context.Context, domain.Task) error) *MockTaskInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockTaskInterface) Delete(_a0 context.Context, _a1 domain.TaskID) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.TaskID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTaskInterface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.TaskID
func (_e *MockTaskInterface_Expecter) Delete(_a0 interface{}, _a1 interface{}) *MockTaskInterface_Delete_Call {
	return &MockTaskInterface_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockTaskInterface_Delete_Call) Run(run func(_a0 context.Context, _a1 domain.TaskID)) *MockTaskInterface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.TaskID))
	})
	return _c
}

func (_c *MockTaskInterface_Delete_Call) Return(_a0 error) *MockTaskInterface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskInterface_Delete_Call) RunAndReturn(run func(context.Context, domain.TaskID) error) *MockTaskInterface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *MockTaskInterface) Update(_a0 context.Context, _a1 domain.Task) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTaskInterface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTaskInterface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 domain.Task
func (_e *MockTaskInterface_Expecter) Update(_a0 interface{}, _a1 interface{}) *MockTaskInterface_Update_Call {
	return &MockTaskInterface_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *MockTaskInterface_Update_Call) Run(run func(_a0 context.Context, _a1 domain.Task)) *MockTaskInterface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Task))
	})
	return _c
}

func (_c *MockTaskInterface_Update_Call) Return(_a0 error) *MockTaskInterface_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTaskInterface_Update_Call) RunAndReturn(run func(context.Context, domain.Task) error) *MockTaskInterface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTaskInterface creates a new instance of MockTaskInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTaskInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTaskInterface {
	mock := &MockTaskInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
